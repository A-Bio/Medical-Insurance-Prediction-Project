# -*- coding: utf-8 -*-
"""Medical Insurance Prediction Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EaH8I3Nyi7tqKTg0ejqv48mi9A4q--rc

# **Importing the dependencies**
"""

# Import necessary librabries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression
import warnings
warnings.filterwarnings('ignore')

# Loading the dataset to Pandas Dataframe
dataset =pd.read_csv('/content/drive/MyDrive/Colab Notebooks/insurance.csv')

# Printing the first 5 rows of the dataframe
dataset.head()

# Number of rows and columns
dataset.shape

# To understand the structure
dataset.info()

# Statistical measures for numerical features
dataset.describe().T

# Statistical measures for categorical features
dataset.describe(include = 'object').T

# Number of missing values in each column
dataset.isnull().sum()

"""# **Univariate Analysis**"""

# Define a color palette
my_palette = sns.color_palette("viridis", n_colors=5)

# Visualizing the Age Distribution with Histogram and KDE

plt.figure(figsize=(6, 6))
sns.histplot(dataset['age'], kde=True, color=my_palette[0])  # Create histogram with kernel density estimate
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Age Distribution ')
plt.show()

# Visualizing the Gender Distribution with a Count Plot

sns.countplot(x='sex', data=dataset, palette=my_palette)
plt.title('Sex Distribution')
plt.xlabel('Sex')
plt.ylabel('count')
plt.show()

dataset['sex'].value_counts()

# Visualizing the BMI Distribution with Histogram and KDE

plt.figure(figsize=(6, 6))
sns.histplot(dataset['bmi'], kde=True, color=my_palette[2])
plt.xlabel('BMI')
plt.ylabel('Frequency')
plt.title('BMI Distribution')
plt.show()

# Distribution of number of Children in the Dataset

plt.figure(figsize=(6,6))
sns.countplot(x='children', data=dataset, palette=my_palette)
plt.title('Children Distribution')
plt.xlabel('Children')
plt.ylabel('count')
plt.show()

dataset['children'].value_counts()

# Distribution of Smokers in the Dataset

sns.countplot(x='smoker', data=dataset, palette=my_palette)
plt.title('Smoker Distribution')
plt.xlabel('Smoker')
plt.ylabel('count')
plt.show()

dataset['smoker'].value_counts()

# Distribution of Regions in the Dataset

plt.figure(figsize=(6,6))
sns.countplot(x='region', data=dataset, palette=my_palette)
plt.title('Region Distribution')
plt.xlabel('Region')
plt.ylabel('count')
plt.show()

dataset['region'].value_counts()

# Visualizing the Distribution of Charges with Histogram and KDE

plt.figure(figsize=(6, 6))
sns.histplot(dataset['charges'], kde=True, color=my_palette[3])
plt.xlabel('Charges')
plt.ylabel('Frequency')
plt.title('Charges Distribution')
plt.show()

"""# **Multivariate Analysis**"""

# Scatter Plot of Age vs. Charges by Sex

plt.figure(figsize=(10, 6))
sns.scatterplot(x='age', y='charges', data=dataset, hue='sex', palette=my_palette)
plt.title('Scatter Plot of Age vs. Charges')
plt.xlabel('Age')
plt.ylabel('Charges')
plt.show()

# Charges by Smoker Status and Sex

sns.barplot(x='smoker', y='charges', hue='sex', data=dataset, palette=[my_palette[3], my_palette[4]])
plt.title('Charges by Smoker and Sex')
plt.show()

# Charges by Region

sns.boxplot(x='region', y='charges', data=dataset, palette=my_palette)
plt.title('Charges by Region')
plt.show()

# Correlation Matrix Heatmap of Age, BMI, Children, and Charges

correlation_matrix = dataset[['age', 'bmi', 'children', 'charges']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Matrix Heatmap')
plt.show()

"""# **Data Preprocessing**"""

# Encode the categorical columns

dataset.replace({'sex':{'male':0,'female':1}}, inplace=True)
dataset.replace({'smoker':{'yes':0,'no':1}}, inplace=True)
dataset.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

dataset.head()

# Splitting the dataset into features and target

x = dataset.drop(columns='charges', axis=1)
y = dataset['charges']

# Splitting the dataset into training and testing data

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=2)

"""# **Model Training**"""

# Loading Linear regression model
regressor = LinearRegression()

# Training the Model with the Training Data
regressor.fit(x_train, y_train)

# Make predictions on the testing set
y_pred = regressor.predict(x_test)

"""# **Model Evalaution**"""

# Evaluate the model
r2 = r2_score(y_test, y_pred)
print(f"R-squared: {r2}")

# Building a predictive system

input_data = (31,1,25.74,0,1,0)

# changing input_data into a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = regressor.predict(input_data_reshaped)
print(prediction)

print('The insurance charge is usd', round(prediction[0],2))

